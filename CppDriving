#include <iostream>
#include <unistd.h>
using namespace std;

/* Entity counter get increased when a new entity is created.
   This counter is used as a unique id for each entity and then it's used
   In GameControl as an index for list of entities in the game. */
   
int entity_counter = 0;

class Player
{
public:
	int posx;
	int posy;
	int player_repr;

	Player(int x, int y, int repr)
	{
		posx = x;
		posy = y;
		player_repr = repr;
	}
};

class Entity
{
public:
	int posx;
	int posy;
	int map_repr;
	int e_id;

	Entity(int x, int y, int repr, int new_id)
	{
		posx = x;
		posy = y;
		map_repr = repr;
		e_id = new_id;
	}

	void move_self_x()
	{
		posx += 1;
	}
};

class FieldDisplay
{
public:
	int sizex;
	int sizey;
	int** field_arr;
	string field_repr;
	// List of translations for display. E.g. if map representation of an Entity
	// is 2, display " O ". This is to avoid converting ints and strings for display.
	string codex[3] = { "   ", " P ", " O " };

	FieldDisplay(int x, int y)
	{
		sizex = x;
		sizey = y;
		field_repr = "";
	}

	int** CreateField()
	{
		field_arr = (int**)malloc(sizex * sizeof(int*));
		for (int x = 0; x < sizex; x++)
		{
			field_arr[x] = (int*)malloc(sizey * sizeof(int));
			for (int i = 0; i < sizey; i++)
			{
				field_arr[x][i] = 0;

			}
		}
		return field_arr;
	}

	string FieldRepr()
	{
		field_repr += "\n";
		for (int x = 0; x < sizex; x++)
		{
			for (int y = 0; y < sizey; y++)
			{
				switch (field_arr[x][y])
				{
				case 0:
					field_repr += codex[0];
					break;
				case 1:
					field_repr += codex[1];
					break;
				case 2:
					field_repr += codex[2];
					break;
				}
			}
			field_repr += "\n";
		}
		return field_repr;
	}

	void placeEntity(int posx, int posy, int map_repr)
	{
		field_arr[posx][posy] = map_repr;
	}

};

class GameControl
{
public:
	Entity* entities[30];
	
	void set_entity(Entity* entity)
	{
	    entities[entity->e_id] = entity;
	}
	
	void move_entities(int field_sizex, int** field_array)
	{
	    for(int x = 0; x < entity_counter; x++)
	    {
	        if(entities[x]->posx+1 <= field_sizex-1)
	        {
	            field_array[entities[x]->posx][entities[x]->posy] = 0;
    	        entities[x]->move_self_x();
	        }
	    }
	}
};

int main()
{
	FieldDisplay fd(9, 9);
	GameControl gc;
	Player pc(8, 4, 1);
	Entity obstacle(0, 5, 2, entity_counter);
	entity_counter += 1;
	fd.CreateField();
	fd.placeEntity(pc.posx, pc.posy, pc.player_repr);
	fd.placeEntity(obstacle.posx, obstacle.posy, obstacle.map_repr);
	cout << fd.FieldRepr();
	gc.set_entity(&obstacle);
	// Test loop
	int game_on = 1;
	while(game_on == 1)
	{
	    gc.move_entities(fd.sizex, fd.field_arr);
	    fd.placeEntity(obstacle.posx, obstacle.posy, obstacle.map_repr);
	    cout << fd.FieldRepr();
	    sleep(1);
	}
	return 0;
}
