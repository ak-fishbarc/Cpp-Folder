#include <iostream>
#include <cstdlib>
#include <unistd.h>
#include <thread>
using namespace std;

// This is still a draft. It needs some refactoring to make it more readable.

/* Entity counter get increased when a new entity is created.
   This counter is used as a unique id for each entity and then it's used
   In GameControl as an index for list of entities in the game. */
   
int entity_counter = 0;

class Player
{
public:
	int posx;
	int posy;
	int player_repr;

	Player(int x, int y, int repr)
	{
		posx = x;
		posy = y;
		player_repr = repr;
	}
};

class Entity
{
public:
	int posx;
	int posy;
	int map_repr;
	int e_id;
	// Respawn timer; Used by redrawing functions so that entities do not respawn
	// all together when they reach the end of the map.
	int respawn_timer;

	Entity(int x, int y, int repr, int new_id)
	{
		posx = x;
		posy = y;
		map_repr = repr;
		e_id = new_id;
		respawn_timer = 0;
	}

    // This functions are here, as in the future I might decide to make class
    // properties private; To avoid mingling with them directly. For now, this is 
    // allowed as this is a prototype.
	void move_self_x()
	{
		posx += 1;
	}

    void restart_self_x()
    {
        posx = 0;
    }
    
    void reposition_self_y(int y)
    {
        posy = y;
    }
};

class FieldDisplay
{
public:
	int sizex;
	int sizey;
	int** field_arr;
	string field_repr;
	// List of translations for display. E.g. if map representation of an Entity
	// is 2, display " O ". This is to avoid converting ints and strings for display.
	string codex[3] = { "   ", " P ", " O " };

	FieldDisplay(int x, int y)
	{
		sizex = x;
		sizey = y;
		field_repr = "";
	}

	int** CreateField()
	{
		field_arr = (int**)malloc(sizex * sizeof(int*));
		for (int x = 0; x < sizex; x++)
		{
			field_arr[x] = (int*)malloc(sizey * sizeof(int));
			for (int i = 0; i < sizey; i++)
			{
				field_arr[x][i] = 0;

			}
		}
		return field_arr;
	}

	string FieldRepr()
	{
		field_repr += "\n";
		for (int x = 0; x < sizex; x++)
		{
			for (int y = 0; y < sizey; y++)
			{
				switch (field_arr[x][y])
				{
				case 0:
					field_repr += codex[0];
					break;
				case 1:
					field_repr += codex[1];
					break;
				case 2:
					field_repr += codex[2];
					break;
				}
			}
			field_repr += "\n";
		}
		return field_repr;
	}

	void placeEntity(int posx, int posy, int map_repr)
	{
		field_arr[posx][posy] = map_repr;
	}
	
	void clearPlace(int posx, int posy)
	{
	    field_arr[posx][posy] = 0;
	}

};

class GameControl
{
public:
	Entity* entities = (Entity*) malloc(sizeof(Entity*) * 30);
	// spawn_timer is used to randomly create new obstacles as the game goes on.
    int spawn_timer;
    
    void set_timer()
    {
        spawn_timer = rand() % 15 + 0;
    }
	/* Check if space on the map is free, before returning y position for newly
	   generated entity.
	   Currently as expected, this function triggers warnings as there is a 
	   chance for infinite loop or no return value. */
	
	int check_space()
	{
	    int done = 1;
	    while(done == 1)
	    {
	        int random_y = rand() % 9 + 0;
	        for(int x = 0; x < entity_counter; x++)
	        {
	            if(entities[x].posy != random_y)
	            {
	                return random_y;
	            }
	        }
	    }
	}
	// Functions create_entity and set_entity; go together
	void create_entity()
	{
	    int get_random_y = check_space();
        Entity new_obstacle(0, get_random_y, 2, entity_counter);
        set_entity(new_obstacle);
        entity_counter += 1;
	}
	
	void set_entity(Entity entity)
	{
	    entities[entity.e_id] = entity;
	}
	
	void move_entities(int field_sizex, int** field_array)
	{
	    for(int x = 0; x < entity_counter; x++)
	    {
	        if(entities[x].posx+1 <= field_sizex-1)
	        {
	            if(entities[x].respawn_timer == 0)
	            {
	                field_array[entities[x].posx][entities[x].posy] = 0;
    	            entities[x].move_self_x();
	            }
	            else
	            {
	                entities[x].respawn_timer -= 1;
	            }
	        }
	        else
	        {
	            field_array[entities[x].posx][entities[x].posy] = 0;
	            entities[x].restart_self_x();
	            int get_random_y = check_space();
                entities[x].reposition_self_y(get_random_y);
                entities[x].respawn_timer = rand() % 10;
	        }
	    }
	}
	
	Entity get_entity(int x)
	{
	    return entities[x];
	}
	
	void move_player(int field_sizey, int** field_array, Player* player)
	{
	    char direction;
	    cout << "A or D: To move left or right, respectively.";
	    cin >> direction;
	    if(direction == 'a' && player->posy-1 > 0)
	    {
	        field_array[player->posx][player->posy] = 0;
	        player->posy -= 1;
	    }
	    else if(direction == 'd' && player->posy+1 < field_sizey)
	    {
	        field_array[player->posx][player->posy] = 0;
	        player->posy += 1;
	    }
	}
};

void player_movement(FieldDisplay* field, Player* player)
{
    char direction;
    cout << "Type 'a' or 'd' to move player to the left or to the right, respectively";
    cin >> direction;
    if(direction == 'a' && player->posy-1 > 0)
    {
        field->field_arr[player->posx][player->posy] = 0;
        player->posy -= 1;
        field->placeEntity(player->posx, player->posy, player->player_repr);
    }
    else if(direction == 'd' && player->posy+1 < field->sizey)
    {
        field->field_arr[player->posx][player->posy] = 0;
        player->posy += 1;
        field->placeEntity(player->posx, player->posy, player->player_repr);
    }
}

int main()
{
    srand(time(NULL));
	FieldDisplay fd(9, 9);
	GameControl gc;
	Player pc(8, 4, 1);
	Entity obstacle(0, 5, 2, entity_counter);
	entity_counter += 1;
	fd.CreateField();
	fd.placeEntity(pc.posx, pc.posy, pc.player_repr);
	fd.placeEntity(obstacle.posx, obstacle.posy, obstacle.map_repr);
	cout << fd.FieldRepr();
	gc.set_entity(obstacle);
	gc.create_entity();
	gc.set_timer();
	// Test 
	int game_on = 1;
	while(game_on == 1)
	{
	    thread move_player(player_movement, &fd, &pc);
	    gc.spawn_timer -= 1;
	    if(gc.spawn_timer == 0)
	    {
	        gc.create_entity();
	        gc.set_timer();
	    }
	    gc.move_entities(fd.sizex, fd.field_arr);
	    for(int x = 0; x < entity_counter; x++)
	    {
	        Entity update_entity = gc.get_entity(x);
	        if(update_entity.respawn_timer == 0)
	        {
	            fd.placeEntity(update_entity.posx, update_entity.posy, update_entity.map_repr);
	        }
	    }
	    cout << fd.FieldRepr();
	    sleep(1);
	    move_player.detach();
	}
	return 0;
}
